##
# tasks/main.yml in ansible-role-deploy-img
#
# Download, extract, prepare and "burn" an image, often to removable media
##

#TODO: This needs to be run on localhost
#TODO: Only on macOS
#TODO: 
- name: Task 10 - Download image
  ansible.builtin.get_url:
    url: "{{ deploy_host_img[ansible_architecture].url }}"
    dest: "/tmp/{{ deploy_host_img[ansible_architecture].dest }}"
    checksum: "{{ deploy_host_img[ansible_architecture].checksum }}"
  delegate_to: "{{ delegate }}"
  become: true

- name: Task 20 - Extract image
  ansible.builtin.command:
    cmd: unxz -fk "/tmp/{{ deploy_host_img[ansible_architecture].dest }}"
  delegate_to: "{{ delegate }}"

- name: Task 30 - Make copy of image for host
  ansible.builtin.copy:
    src: "/tmp/{{ deploy_host_img[ansible_architecture].img }}"
    dest: "/tmp/{{ inventory_hostname }}.img"
  delegate_to: "{{ delegate }}"

- name: Task 40 - Mount image
  ansible.builtin.command:
    cmd: hdiutil attach "/tmp/{{ inventory_hostname }}.img"
  register: attach_out
  delegate_to: "{{ delegate }}"

- name: Task 41 - Get mount point
  set_fact:
    attach_volume: "{{ attach_out.stdout | regex_search('.+FAT.+(/Volumes/.+)','\\1', multiline=True) | first }}"

- debug:
    var: attach_volume

- debug:
    msg: "{{ attach_volume | type_debug }}"

- name: Task 42 - Get mount device
  set_fact:
    attach_device: "{{ attach_out.stdout | regex_search('(/dev/disk[0-9])\\b','\\1', multiline=True) | first }}"
  delegate_to: "{{ delegate }}"

- debug:
    var: attach_device

- name: Task 50 - Customize network configuration
  template:
    force: yes
    src: network_config.j2
    dest: "{{ attach_volume }}/network-config"
    backup: yes
  delegate_to: "{{ delegate }}"

- name: Task 60 - Customize first boot configuration
  template:
    src: "cloud_init.j2"
    dest: "{{ attach_volume }}/user-data"
  delegate_to: "{{ delegate }}"

- name: Task 70 - Unmount image
  ansible.builtin.command:
    cmd: hdiutil detach "{{ attach_device }}"
  delegate_to: "{{ delegate }}"

- name: Task 80 - Request user make SD card available
  pause:
    prompt: "Make sure the SD card is inserted"
  delegate_to: "{{ delegate }}"

- name: Task 90 - List internal physical disks, incl.  SD card
  command:
    cmd: diskutil list internal physical
  register: diskutil_out
  delegate_to: "{{ delegate }}"

- debug:
    var: diskutil_out
  delegate_to: "{{ delegate }}"

- name: Task 91 - Get SD card mount device
  set_fact:
    SD_card_device: "{{ diskutil_out.stdout | regex_search('[\\s\\S]*Apple_APFS[\\s\\S]*(/dev/disk[1-9])','\\1', multiline=True) | first }}"
  delegate_to: "{{ delegate }}"

- debug:
    var: SD_card_device
  delegate_to: "{{ delegate }}"

- debug:
    msg: "{{ SD_card_device | type_debug }}"

- name: Task 100 - Request user make SD card available
  pause:
    prompt: "Make sure the SD card is inserted"
  delegate_to: "{{ delegate }}"

#TODO: Might need to check what's mounted first
- name: Task 110 - unmount disk
  command:
    cmd: diskutil unmountDisk "{{ SD_card_device }}"
  delegate_to: "{{ delegate }}"

- name: Task 120 - Write image to media
  command:
    cmd: "dcfldd if=/tmp/{{ inventory_hostname }}.img of={{ SD_card_device }} bs=1M"
  delegate_to: "{{ delegate }}"

#TODO: Here we need to determine what, if any volume has been mounted by the
#system after the image has been written
- name: Task 130 - Eject media
  command:
    cmd: "diskutil eject {{ SD_card_device }}"
  delegate_to: "{{ delegate }}"

- name: Task 140 - Request user insert SD card
  pause:
    prompt: "Make sure the SD card is transferred to the RPi"
  delegate_to: "{{ delegate }}"
